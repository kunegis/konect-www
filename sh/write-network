#! /bin/sh
#
# Write the skeleton of the webpage for one network. 
#
# PARAMETERS
#	$network
#
# STDOUT
#	HTML content 
#
# INPUT FILES
#	dat-www/plots-network.$network
#	skeleton/networks/$network/metadata.html
#	skeleton/networks/$network/statistics.html
#	dat/NETWORKS_DOWNLOAD
#

set -e

#
# Collect information 
#

meta_name=$(field=name sh/read-meta)
extr=$(field=extr sh/read-meta)
cite=$(field=cite sh/read-meta)

#
# Head
#

cat <<EOF
#nav:<A href="../../">KONECT</A> ‣ <A href="../">Networks</A> ‣
<H1>$meta_name</H1>
<P>
$(field=long-description sh/read-meta | fold -b -s)
</P>

<H2>Metadata</H2>
EOF

#
# Metadata
#
cat skeleton/networks/"$network"/metadata.html

#
# Statistics
#
cat <<EOF
<H2>Statistics</H2>
EOF

cat skeleton/networks/"$network"/statistics.html

#
# Plots 
#
if [ -s dat-www/plots-network."$network" ] ; then
	cat <<EOF
<H2>Plots</H2>
EOF

	plot_last=''
	for file in $(cat dat-www/plots-network."$network")
	do
		if echo "$file" | grep -q -E '^decomposition\.' ; then
			plot=decomposition
		else
			plot=$(echo "$file" | sed -E -e 's,^(.*)\.[^.]+\.[^.]+$,\1,')
		fi
		if [ "$plot" != "$plot_last" ] ; then
			if [ "$plot" = decomposition ] ; then
				echo "<H3>Matrix decompositions plots</H3>"
			else
				plot_index=$(echo "$plot" | sed -E -e 's,-,__,g;s,\.,___,g')
				label_plot=$(<konect-toolbox/m/konect_data_plot.m sed -E -e 's,^\s*labels_plot\s*\.\s*'"$plot_index"'\s*=\s*'\''(.*)'\''\s*;\s*$,\1,;t;d')
				label_plot_uc=$(echo "$label_plot" | sed -E -e 's,^(.).*$,\1,' | tr a-z A-Z)$(echo "$label_plot" | sed -E -e 's,^.(.*)$,\1,')
				echo '<H3><A href="${root}/plots/'"$plot"'/">'"$label_plot_uc"'</A></H3>'
			fi
		fi
		plot_last="$plot"
		echo "<A href=\"../../plot/$file.full.png\"><IMG SRC=\"../../plot/$file.small.png\"></A>"
	done
fi

#
# Downloads 
#

if grep -q -E '^'"$network"'$' dat/NETWORKS_DOWNLOAD ; then
	show_tsv=1
else
	show_tsv=
fi
url=$(<uni/meta."$network" sed -E -e 's,^\s*url\s*:\s*(\S+)\s*$,\1,;t;d')
if [ "$url" ] ; then
	show_url=1
else
	show_url=
fi
if [ "$extr" ] ; then
	show_extr=1
else
	show_extr=
fi
if [ "$show_tsv$show_url$show_extr" ] ; then
	cat <<EOF
<H2>Downloads</H2>
<UL>
EOF
	if [ "$show_tsv" ] ; then
		cat <<EOF
<LI><A href="../../files/download.tsv.$network.tar.bz2">Data as TSV</A> ($(stat -c%s dat/download.tsv.$network.tar.bz2 | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta') bytes)
EOF
	fi
	if [ "$show_url" ] ; then
		cat <<EOF
<LI><A href="$url">Original dataset source</A>
EOF
	fi
	if [ "$show_extr" ] ; then
		echo "<LI><A href=\"https://github.com/kunegis/konect-extr/tree/master/extr/$extr\">KONECT extraction code</A> (GitHub)"
	fi
	echo '</UL>'
fi

#
# References
#

echo
echo '<H2>References</H2>'

sh/write-references "$cite konect"

## # Make sure they all exist, because Bibtex2Html does *not*
## # return a non-zero exit status when references are missing. 
## for bibkey in $(echo "$cite" | tr ',' ' ') ; do
## 	grep -q -E '\{\s*'"$bibkey"'\s*,\s*$' konect-extr/konect.bib || {
## 		echo >&2 "*** Bibtex reference '$bibkey' used by network '$network' expected in 'konect-extr/konect.bib', but not found"
## 		exit 1
## 	}
## done
	
## tmpfile=$(mktemp)
## { printf '%s\n' "$cite" | sed -E -e 's|,|\
## |g' ; } >"$tmpfile"
## dir=$(pwd)
## cd "$(dirname "$tmpfile")"
## tmpfile2=$(mktemp)
## bibtex2html -q -w --citefile "$(basename "$tmpfile")" --nodoc --nobibsource -o - --no-header "$dir"/konect-extr/konect.bib >"$tmpfile2" || {
## 	echo >&2 "*** Error running Bibtex"
## 	echo >&2 "Content of citefile:"
## 	cat >&2 -- "$tmpfile"
## 	exit 1
## }
## exitstatus=$?
## <"$tmpfile2" sed -E -e 's,<hr>.*$,,;tx;by;:x;q;:y' | sed -E -e 's,--,–,g'
## rm -f -- "$tmpfile" "$tmpfile2"

